<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thilo Rusche]]></title>
  <link href="http://trusche.github.com/atom.xml" rel="self"/>
  <link href="http://trusche.github.com/"/>
  <updated>2012-11-27T14:32:02+00:00</updated>
  <id>http://trusche.github.com/</id>
  <author>
    <name><![CDATA[Thilo Rusche]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reload your factories with spork]]></title>
    <link href="http://trusche.github.com/blog/2012/11/20/reload-your-factories-with-guard/"/>
    <updated>2012-11-20T19:13:00+00:00</updated>
    <id>http://trusche.github.com/blog/2012/11/20/reload-your-factories-with-guard</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sporkrb/spork">Spork</a> is a great tool that can really cut down
on the startup time of your tests. This gets more noticable as your code base grows in size.
Our current test suite at legitscript takes quite a few seconds to start up,
which would be a big impediment to test-driven development without spork.</p>

<p>If spork is used together with <a href="https://github.com/thoughtbot/factory_girl">factory_girl</a>, \
it helps to load the factories on each test run.
If they&#8217;re loaded in the pre-fork block,
each tweak to a factory would require restarting spork.</p>

<p>The naive approach would be to reload those files just like your models and controllers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/support/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">load</span> <span class="n">f</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this attempts to redefine existing factories, which will fail with an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Factory already registered: website
</span><span class='line'>  (FactoryGirl::DuplicateDefinitionError)</span></code></pre></td></tr></table></div></figure>


<p>On top of that, if you have any sequences defined, you would get an error similar to this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Exception encountered:
</span><span class='line'>  #&lt;FactoryGirl::DuplicateDefinitionError:
</span><span class='line'>  Sequence already registered: email&gt;</span></code></pre></td></tr></table></div></figure>


<p>The solution is to explicitly clear out any existing factories and sequences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">sequences</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">factories</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/support/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">load</span> <span class="n">f</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voila! Tweak a factory and keep coding while your tests re-run in the background.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging outbound HTTP requests]]></title>
    <link href="http://trusche.github.com/blog/2011/09/29/logging-outgoing-http-requests/"/>
    <updated>2011-09-29T19:13:00+01:00</updated>
    <id>http://trusche.github.com/blog/2011/09/29/logging-outgoing-http-requests</id>
    <content type="html"><![CDATA[<p>Rails logs a ton of details about incoming HTTP requests in debug mode.
But what about outbound requests?
Few gems implementing third party APIs bother to log their requests and responses,
and hacking their source code is suboptimal.
Even for outbound HTTP requests made by your own code,
it quickly becomes tedious to sprinkle logging statements
all over the place to get a good look at the data.</p>

<h3>Metaprogramming to the rescue</h3>

<p>Simply override the request method of the
<a href="http://www.ruby-doc.org/stdlib/libdoc/net/http/rdoc/index.html">Net::HTTP module</a> in ruby
to add some logging. Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Net</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">HTTP</span>
</span><span class='line'>    <span class="n">alias_method</span><span class="p">(</span><span class="ss">:orig_request</span><span class="p">,</span> <span class="ss">:request</span><span class="p">)</span> <span class="k">unless</span> <span class="nb">method_defined?</span><span class="p">(</span><span class="ss">:orig_request</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Request: </span><span class="si">#{</span><span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="si">}</span><span class="s2"> http://</span><span class="si">#{</span><span class="vi">@address</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="vi">@port</span><span class="si">}#{</span><span class="n">req</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&quot;POST&quot;</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">req</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">body</span> <span class="p">:</span> <span class="n">req</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>          <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;POST Data: </span><span class="si">#{</span><span class="n">data</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">orig_request</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Response: </span><span class="si">#{</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">response</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This inserts the details of any outgoing HTTP request
and it’s response into the standard rails logger.
(Actually, depending on what of the many request methods Net::HTTP
offers is used for the request, it may log some stuff twice.
See my gem below on how to fix that.)</p>

<p>The somewhat whacky looking way of finding the post data
accounts for the different ways in which
<a href="http://www.ruby-doc.org/stdlib/libdoc/net/http/rdoc/classes/Net/HTTP.html#M001363">Net::HTTP::post</a>
and
<a href="http://www.ruby-doc.org/stdlib/libdoc/net/http/rdoc/classes/Net/HTTP.html#M001363">Net::HTTP::post_form</a>
handle that data internally.</p>

<p>You could take this a bit further.
For example, it might be useful to log the TCP connection attempt itself
(since if that fails, the request is never sent, and you’re none the wiser)
by overriding the (private) connect method.</p>

<h3>There&#8217;s a gem for that (now)</h3>

<p>Since I find myself in this situation regularly,
I’ve created a ruby gem, creatively named <a href="http://github.com/trusche/httplog">httplog</a>,
that does just that.
Here’s some (truncated) sample output from a request made by the
<a href="https://github.com/simplegeo/simplegeo-ruby">simplegeo</a> gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[httplog] Connecting: api.simplegeo.com
</span><span class='line'>[httplog] Sending: GET http://api.simplegeo.com:80/1.0/context/address.json?address=22201&filter=
</span><span class='line'>[httplog] Status: 200
</span><span class='line'>[httplog] Response: {"query":{"latitude":38.885484,"longitude":-77.099113,"address":"22201"...</span></code></pre></td></tr></table></div></figure>


<p>Disclaimer: This is my first published gem, your mileage may vary.
It’s been working fine for me with ruby 1.9.2 and 1.9.3,
but I have not taking extra pains to test it against older versions.
If you run into trouble, feel free to open an issue on <a href="https://github.com/trusche/httplog/issues">github</a>.</p>
]]></content>
  </entry>
  
</feed>
